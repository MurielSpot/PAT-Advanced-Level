/*
https://www.patest.cn/contests/pat-a-practise/1020
类型：树的建立，树的遍历

难度：2
*/

#include<cstdio>
#include<queue>
using namespace std;

struct node{
	int data;
	struct node* left;
	struct node* right;
};

const int MAX=50;
int post[MAX]={0};
int in[MAX]={0};

//根据后序和先序序列建立二叉树
node* buildBT(int postL,int postR,int inL,int inR){
	if(postL>postR)return NULL;
	node* now=new node;
	int i;
	for(i=inL;i<=inR;i++){
		if(in[i]==post[postR])break;//在中序序列中找到当前树的根结点，从而划分左右子树。
	}
	now->data=post[postR];
	int num=i-inL;//中序序列中根结点左边有多少元素。
	
  //根据num确定左子树范围，递归建立左子树。
	now->left=buildBT(postL,postL+num-1,inL,i-1);
  //同理。
	now->right=buildBT(postL+num,postR-1,i+1,inR);
	
	return now;
}

//层序遍历
int flag=1;
void levelTravesal(node* root){
	queue<node*> q;
	q.push(root);
	while(!q.empty()){
		node* newNode=q.front();
		q.pop();
		if(flag){
			printf("%d",newNode->data);
			flag=0;
		}else{
			printf(" %d",newNode->data);
		}
		if(newNode->left){
			q.push(newNode->left);
		}
		if(newNode->right){
			q.push(newNode->right);
		}
	}
}

int main(){
	int n;
	scanf("%d",&n);//二叉树中总结点数。
	
	for(int i=0;i<n;i++){
		scanf("%d",&post[i]);
	}
	for(int i=0;i<n;i++){
		scanf("%d",&in[i]);
	}
	
	node* root;
	root=buildBT(0,n-1,0,n-1);
	
	levelTravesal(root);
	
	return 0;
}
