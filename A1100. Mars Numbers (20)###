/*
https://www.patest.cn/contests/pat-a-practise/1100

类型：字符串处理（数字和字符串的转换）

难度：3（做了很长时间，一开始用char数组做的，很麻烦）

注意事项：
1. 大于12的数并不是都是由两个字符串组成，如13、26、39等13的倍数，直接用tam、hel、maa表示即可，不是tam tret。同样，只有一个字符串的数并不一定是小于12的数。
2. (ch=getchar())!=" "出错，因为双引号对应字符串，单引号对应字符。要谨慎。

其他：
1. 字符串转整数：对于string，可以用stoi函数，注意c++11才能用该函数：
int stoi (const string&  str, size_t* idx = 0, int base = 10);
int stoi (const wstring& str, size_t* idx = 0, int base = 10);
第一个参数：需要转换的字符串。
第二个参数：
Pointer to an object of type size_t, whose value is set by the function to position of the next character in str after the numerical value.
This parameter can also be a null pointer, in which case it is not used.
大概意思就是说，如果idx不为空指针，则将字符串中数字后面的第一个字符的位置赋给这个指针。
第三个参数：
需要转换成的数字的基数，默认10进制。
网上说：stoi函数默认要求输入的参数字符串是符合int范围的[-2147483648, 2147483647]，否则会runtime error。atoi函数则不做范围检查，若超过int范围，则显示-2147483648（溢出下界）或者2147483647（溢出上界）。
2. 读取带空格的一行：
gets已经被新标准删了，用fgets获者gets_s代替。但是fgets好像会把\n也读入数组。fgets(num,10,stdin)。
或者用getline，遇到\n结束读取，getline(std::cin,num)。
3. string::npos的含义：Maximum value for size_t. npos is a static member constant value with the greatest possible value for an element of type size_t.
4. string的用法不熟。
*/
#include<cstdio>
#include<string>
#include<algorithm>
#include<iostream>
using namespace std;

const int MAXN=13;
const int MAXM=106;
string d1[MAXN]={"tret","jan","feb","mar","apr","may","jun","jly","aug","sep","oct","nov","dec"};
string d2[MAXN]={"tret","tam","hel","maa","huh","tou","kes","hei","elo","syy","lok","mer","jou"};

void num2str(string num){
	int ans=stoi(num);
	if(ans/13){//注意：13的整倍数，如13、26等，表示成13进制数字是10、20，但是输出是0对应的tret是不需要输出的，直接输出tam、hel即可。
		cout << d2[ans / 13];
		if (ans % 13)cout << " "<<d1[ans % 13];
	}else{
		cout<<d1[ans % 13];
	}
	cout << endl;
}
void str2num(string num){
	int blankPos=num.find(' ');
	if(blankPos!=string::npos){//有空格出现，说明13进制有两个字符串。
		string tmp=num.substr(0,blankPos);
		int ans=0;
		for(int i=0;i<13;i++){
			if(d2[i]==tmp){
				ans+=i*13;
				break;
			}
		}
		tmp=num.substr(blankPos+1);
		for(int i=0;i<13;i++){
			if(d1[i]==tmp){
				ans+=i;
				break;
			}
		}
		printf("%d\n",ans);
	}else{//有一个字符串，但是大小不一定就小于13，比如26、39都是一个字符串。
		bool notfind=true;
		for(int i=0;i<13;i++){
			if(d1[i]==num){
				printf("%d\n",i);
				notfind=false;
				break;
			}
		}
		if(notfind){
			for(int i=0;i<13;i++){
				if(d2[i]==num){
					printf("%d\n",i*13);
					break;
				}
			}
		}
	}
}

int main(){
	int n;
	scanf("%d",&n);getchar();
	for(int i=1;i<=n;i++){
		string num;
		getline(std::cin,num);
		if(num[0]>='0'&&num[0]<='9'){
			num2str(num);
		}else{
			str2num(num);
		}
	}
	return 0;
}
