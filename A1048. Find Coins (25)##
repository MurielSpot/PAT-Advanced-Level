/*
https://www.patest.cn/contests/pat-a-practise/1048

类型：类似于背包问题。

难度：2。(求两钱币相加是否等于给定值。）

注意事项：
1. c用来记录某种面值的钱币有多少个，一般情况只要c对应值不等于0即可，但是当相同面值钱币相加时，需要c对应值不小于2。
2. 输出要求，如果有多对答案（v1，v2），输出v1最小的那对，而我并没有注意到这点，代码碰巧满足了这个条件，所以以后读题一定要仔细。

其他方法：
1. 哈希法：c数组用途不变，确定一个c[i]之后可以直接查询c[m-i]是否有值来得到结果，但此处c大小不能仅开到500，因为m-i可能会超过500。
而我的做法用了哈希，但是具体方法上比较浪费时间，用两个指针指向数组两头，规定它们只能向中间移动，两指针等于给定m时返回，但实际上确定一个指针，比如确定i后，j不需要向i逼近，直接让j=m-i即是要找的位置。
因为该题中数组c的下标与对应的钱币面值是一致的，所以可以直接用m-i找到某面值钱币的个数，我做的方法适用于面值和下标不是一一对应的情况，比如数组里为1，1，2，3，3，4，找两数字之和等于5的情况，由于下标0到5与它们存的数字并不一一对应，所以不能通过i位置和5-i位置的值相加是否等于5判断是否存在所求的一对数字。
2. 二分查找。
*/

#include<cstdio>
#include<algorithm>
#include<iostream>
using namespace std;

const int MAXN=1010;

int n;//coins.
int m;//the amount of money to pay.

int c[510]={0};

void find(int sum,int &left,int &right){
	int tmpSum;
	while(left<=right){
		while(c[left]==0&&left<=right){//该位置没有钱币。
			left++;
		}
		while(c[right]==0&&left<=right){
			right--;
		}
		if(left<=right){
			tmpSum=left+right;
			if(tmpSum==sum){
				if(left==right){//如果是相同面值相加。
					if(c[left]<2)left++;//使left大于right，因为此时使同样面值的钱币相加，需要该钱币数大于等于2。
				}
				return;
			}else if(tmpSum<sum){
				left++;//right对应的计数仍然非0。
			}else{
				right--;
			}
		}
	}
}

int main(){
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++){
		int x;
		scanf("%d",&x);
		c[x]++;
	}
	int a=0,b=509;
	find(m,a,b);
	if(a>b){//a,b是引用，所以如果找完了数组，即a>b还没有找到要找的元素，则无解。
		printf("No Solution");
	}else{
		printf("%d %d",a,b);
	}
	return 0;
}
