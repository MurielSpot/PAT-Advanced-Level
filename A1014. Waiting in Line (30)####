/*
https://www.patest.cn/contests/pat-a-practise/1014

類型:模擬(很像并發,一個時間段對多個時間(即隊列)進行處理)

難度:4(做了幾個小時,思路比較亂,題目也沒有很好地理解.)

注意事項:
1. 要查詢的人可以看作全部是8點到的,然後按順序等待服務.第二行數據就可看作客戶到來的次序.第三行衹是要查詢的值,并不代表客戶到來順序.
2. 正好17:00可以被服務的被認爲無效.

思路:
找最短窗口:
  如果最短并不是滿的,直接把當前客戶放入其中;
  如果滿了,要從所有隊列的對頭刪掉一個最早結束服務的人,把當前客戶放在該隊列末尾.
隊列對應有一個記錄當前隊列中的客戶處理完后,開始服務下一個客戶的時刻(這個時間在前面客戶入隊時可算得),如果新客戶放入隊列時,這個時刻大於等于17點,則標記客戶不能被服務,否則可以被服務.
不管可不可以被服務,都要把新客戶加到對尾,且更新處理完這個新隊列后服務下一個用戶的時刻,以便不影響其他客戶正常地進入其他隊列.
(之所以某隊列再服務客戶已經超過17點還要把客戶入隊是因爲,比如[1,500,2][5,5,5]有這兩個隊列,都是滿的,超過20分鐘就不能被服務,
此時想加入新客戶,則第一隊過了1分鐘就可以有空位,所以1處理完出隊,得[500,2][5,5,5],此時隊列1已無能力在20分鐘之内再處理500和2之後的用戶了,
新客戶劃入隊1中,但是如果認爲這個隊已經無效,沒必要再加客戶到隊尾,則發現後面不管處理多少個客戶都會歸入到隊列1裏面且不入隊,出現錯誤結果.
因爲實際上隊列2中的5會很快處理完,出現新的空位,所以上面提到的新客戶比較倒霉,進入了隊列1裏,而之後來的客戶實際上可以進入隊列2能夠被處理.(******不過沒有看到測試數據,不知道會不會真的不入隊就會發生如上述的情況******))

*/
#include<cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>
#include<cmath> 
#include<queue>
using namespace std;

const int MAXN = 22;
const int MAXM=12;
const int MAXK=1010;
const int MAXQ=1010;
const int INF = 1000000000;

int n;//windows.
int m;//capacity inside.
int k;//customers.
int q;//queries.

struct info{
	bool valid;
	int fin;
	int lasting;
}customer[MAXK];

queue<int> window[MAXN];
int wTime[MAXN];//可以開始服務下一個來的人的開始時間.

//獲得各個窗口最早可以服務的窗口序號.
int getWin(){
	//找長度最小的窗口.
	int shortest=INF,shortestIndex=-1;
	for(int i=0;i<n;i++){
		if(window[i].size()==0){
			return i;
		}else{
			if(shortest>window[i].size()){
				shortest=window[i].size();
				shortestIndex=i;
			}
		}
	}
	if(shortest<m){//長度小於容量,可以直接添加.
		return shortestIndex;
	}else{//刪了各隊首重最先結束的那個,將當前客戶加在這個對的後面.
		int del=INF,delQ;
		for(int i=0;i<n;i++){
			int c=window[i].front();
			if(customer[c].fin<del){
				del=customer[c].fin;
				delQ=i;
			}
		}
		window[delQ].pop();
		return delQ;
	}
}

bool handle(int index){
	bool flag=true;
	
	int w=getWin();
	if(wTime[w]>=1020)flag=false;//這裏用>=嗎,要包括17:00這個值嗎?
	
	window[w].push(index);//仍然把這個客戶壓棧,方便後面的計算;雖然他可能不會被服務,爲了方便後面的查詢.
	customer[index].fin=wTime[w]+customer[index].lasting;
	wTime[w]=customer[index].fin;
	
	return flag;
}

int main() {
	fill(wTime,wTime+MAXN,480);
	
	cin>>n>>m>>k>>q;
	for(int i=1;i<=k;i++){
		//把下面兩行的i寫成k了,很久才查出錯!!!!
		scanf("%d",&customer[i].lasting);
		customer[i].valid=handle(i);
	}
	for(int i=0;i<q;i++){
		int query;
		scanf("%d",&query);
		if(customer[query].valid){
			printf("%02d:%02d\n",customer[query].fin/60,customer[query].fin%60);
		}else printf("Sorry\n");
	}
	return 0;
}

