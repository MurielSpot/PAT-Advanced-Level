/*
https://www.patest.cn/contests/pat-a-practise/1070

难度：2（涉及到浮点类型，做题出了很多错）

注意事项：
1. 当数据是double型时，一定要用%lf来读入，如果用了%d会出现莫名其妙的结果。
2. double最好不要参加比较，用的使用最好用极小值来矫正。因为即使它有时不影响结果，但是如果代码本身有错，很可能让人以为可能是double比较时出错引起的，其实并不是。
3. 题目中库存量全用int表示的时候，会有一个测试点答案错误，要改成double。以后代码中可能会用到double或者参与double运算的变量类型一定要设置为double。但是要注意整型才能做数组的下标，而浮点转换成整型可能会丢失精度，所以变量要是为double就不能做下标了。
*/

#include<cstdio>
#include<algorithm>
#include<iostream>
using namespace std;

const int MAXN=1010;
int n;
double d;
struct info{
	double inventory;
	double price;
	double singlePrice;
}mooncake[MAXN];

bool cmp(info a,info b){
	return a.singlePrice>b.singlePrice;
}

int main(){
	scanf("%d%lf",&n,&d);
	for(int i=0;i<n;i++){
		scanf("%lf",&mooncake[i].inventory);
	}
	for(int i=0;i<n;i++){
		scanf("%lf",&mooncake[i].price);//应该用lf接收double型的price，不然会出错，一定要记住这个错误，耽误了半个小时查错。
		mooncake[i].singlePrice=mooncake[i].price/mooncake[i].inventory;//除过之后单价很接近0，不过好像并不影响结果。
	}
	sort(mooncake,mooncake+n,cmp);
	double profit=0;
	double storage=0;
	for(int i=0;i<n;i++){
		if(storage+mooncake[i].inventory<=d){//当inventory、d、storage都用的int时，有一个测试点会出错，全改成double之后就没有错了。
			profit+=mooncake[i].price;
			storage+=mooncake[i].inventory;
		}else{
			//只需要部分i号月饼。
			profit+=(d-storage)*mooncake[i].singlePrice;
			break;
		}
	}
	printf("%.2lf",profit);
	return 0;
}
