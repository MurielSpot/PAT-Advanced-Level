/*
https://www.patest.cn/contests/pat-a-practise/1072

類型：最短路徑。

難度：5（難，還需要看看其他人的做法）

其他：vs2017，運行測試樣例時和所給結果一致，而dev最後的3.3被它計算成3.2。
Sample Input 1:
4 3 11 5
1 2 2
1 4 2
1 G1 4
1 G2 3
2 3 2
2 G2 1
3 4 2
3 G3 2
4 G1 3
G2 G1 1
G3 G2 2
Sample Output 1:
G1
2.0 3.3

Sample Input 2:
2 1 2 10
1 G1 9
2 G1 20
Sample Output 2:
No Solution
*/
#include <iostream>
#include <cstring>
#include <algorithm>
#include<vector>
using namespace std;

#define P 0

const int MAXG=1020;
const int INF=1000000000;

struct node{
	double dist;
	int index;
	node():dist(0),index(-1){}
	node(int a,double b):index(a),dist(b){}
};

int n;//houses.[1,n]
int m;//candidate locations.[G1,GM]
int k;//roads.(house--gas station).
double ds;//range.

vector<node> g[MAXG];//前[1,n]存房子，從n+1開始存station.
int tag[MAXG]={0};//標記某個點是房子還是站點。1表示房子，2表示站點。

int getIndex(char arr[]){
	int index=0;
	if(arr[0]=='G'){
		if(arr[2]!='\0'){//不止一位數字時，肯定對應G10。
			index=10;
		}else{
			index=arr[1]-'0';
		}
		index+=n;
	}else{
		int i=0;
		while(arr[i]!='\0'){
			index=index*10+arr[i]-'0';
			i++;
		}
	}
	return index;
}

inline void setTag(int index){
	if(index>n)tag[index]=2;
	else tag[index]=1;
}

//獲得某個station到最近住宅的距離。實際就是求最短路徑。
bool getNearestD2H(int u,double &outD,double &averD){
	outD = -1; averD = -1;
	bool valid=false;
	
	bool vis[MAXG]={false};
	double dist[MAXG];
	fill(dist,dist+MAXG,INF);
	dist[u]=0;
#if P
	printf("\n*****\nu=%d\n*****\n",u);
#endif
	for(int i=1;i<=n+m+1;i++){
		int minIndex=-1;double minDist=INF;
		for(int v=1;v<=n+m;v++){
			if(dist[v]<minDist&&vis[v]==false){
				minDist=dist[v];
				minIndex=v;
			}
		}
#if P
	printf("\nmixIndex=%d,minDist=%.1lf\n",minIndex,minDist);
#endif
		if(minIndex==-1&&outD==-1){break;}//沒有找到所需距離，且一次住宅都沒遇到。即station到不了house。
		else if(minIndex==-1){valid=true;break;}//找完了，且最近距離已更新。
		if(tag[minIndex]==1&&minDist>ds){break;}//如果遇到過住宅，根據是否全部在station可達範圍内來判斷該station是否有效。
		if(outD==-1&&tag[minIndex]==1){
			outD=dist[minIndex];//第一次發現當前結點是房屋，則將最近距離賦值給外部的距離變量outD。
		}
		vis[minIndex]=true;
		for(int j=0;j<g[minIndex].size();j++){
			int v=g[minIndex][j].index;//這裏用minIndex，不是u!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			if(vis[v]==false&&dist[v]>dist[minIndex]+g[minIndex][j].dist){
				dist[v]=dist[minIndex]+g[minIndex][j].dist;
			}
#if P
	printf("\n        v=%d,dist[v]=%.1lf\n",v,dist[v]);
#endif
		}
	}
	if(valid){
		averD=0;
		for(int v=1;v<=n;v++){
			if(dist[v]!=INF){
				averD+=dist[v];
			}
		}
		averD/=n;
#if P
	printf("\naverD=%.1lf\n",averD);
#endif
	}
	return valid;
}

vector<int> ansSta;//離最近房屋的最遠距離的站點標號。
double ansAver=-1;//最遠距離。
double farestD=-1;
void updateAns(int index,double dist,double averd){
	if(dist>=0&&averd>=0){
		if(dist>farestD){
			farestD=dist;
			ansSta.clear();
			ansSta.push_back(index);
			ansAver=averd;
		}else if(dist==farestD){
			if(averd<ansAver){//這裏是小於不是大於。
				ansSta.clear();
				ansSta.push_back(index);
				ansAver=averd;
			}else if(averd==ansAver){
				ansSta.push_back(index);
			}
		}
	}
}

int main() {
	scanf("%d%d%d%lf",&n,&m,&k,&ds);
	for(int i=0;i<k;i++){
		char p1[5],p2[5];
		double dist;
		scanf("%s%s%lf",p1,p2,&dist);
		int v1=getIndex(p1);
		int v2=getIndex(p2);
		setTag(v1);setTag(v2);
		g[v1].push_back(node(v2,dist));
		g[v2].push_back(node(v1,dist));
	}
#if P
	printf("n=%d,m=%d,k=%d,ds=%d\n",n,m,k,ds);
#endif
	for(int v=n+1;v<=n+m;v++){
		double nd=-1;double averd=-1;
		bool valid=getNearestD2H(v,nd,averd);
		if(valid)updateAns(v,nd,averd);
	}
	if(farestD==-1||ansAver==-1){
		printf("No Solution");
	}else{
		sort(ansSta.begin(),ansSta.end());
		printf("G%d\n",ansSta[0]-n);
		printf("%.1lf %.1lf",farestD,ansAver);
		
	}
	return 0;
}
