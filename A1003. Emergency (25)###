/*
https://www.patest.cn/contests/pat-a-practise/1003
类型：深搜，最短路径。

难度：3
*/

#include<cstdio>
#include<iostream>
#include<algorithm>
#include<map>
#include<string>
#include<queue> 
using namespace std;

const int maxn = 510;
const int INF = 1000000000;//无穷大。

int n;//<=500,the number of cities.(0~n-1).
int m;//roads.
int c1;//source.
int c2;//destination.

int team[maxn]={0};
int g[maxn][maxn]={0};

bool vis[maxn]={false};
int dist[maxn];
vector<int> pre[maxn];
void dijkstra(int u){//到达u的最短路径。
	//fill(vis,vis+maxn,false);//因为改函数值运行依次，所以做该题在上面初始化过依次之后，这里不再全部置为0.
	fill(dist,dist+maxn,INF);
	dist[u]=0;
	
	//共有n个点，每次找到一个最小的结点加入，如果连通的话，n次正好加完。所以循环n次。
	for(int v=0;v<n;v++){
		//找未访问结点中距离源点距离最小的结点，即dist最小。注意上面dist[u]=0，所以这个最初最小结点是可以找到的即为源结点。
		int minIndex=-1,minDist=INF;
		for(int i=0;i<n;i++){
			if(dist[i]<minDist&&vis[i]==false){
				minDist=dist[i];
				minIndex=i;
			}
		}
		if(minIndex==-1){
			//已经没有未访问的最小结点。找完了，可以返回。
			return;
		}
		//更新找到最新最近结点的状态为已访问。判断此结点的加入是否使与它相连的结点距源点的距离变小。
		vis[minIndex]=true;
		for(int i=0;i<n;i++){
			//连接的结点未访问，且可联通。
			if(vis[i]==false&&g[minIndex][i]>0&&g[minIndex][i]<INF){
				//如果通过minIndex可以使连接结点的距离变小。
				if(dist[i]>dist[minIndex]+g[minIndex][i]){
					pre[i].clear();
					pre[i].push_back(minIndex);
					dist[i]=dist[minIndex]+g[minIndex][i];
				}else if(dist[i]==dist[minIndex]+g[minIndex][i]){
					pre[i].push_back(minIndex);
				}
			}
		}
	}
}

//算出所有最短路径个数，以及可以集结的最大帮手个数。
int maxHand=0,path=0;
void dfs(int u,int tempHand){
	tempHand+=team[u];
	//每次到达c1是一条完整的路径。
	if(u==c1){
		path++;
		if(tempHand>maxHand){
			maxHand=tempHand;
		}
		return;
	}
	for(int i=0;i<pre[u].size();i++){
		dfs(pre[u][i],tempHand);
	}
}

void output(int* arr,int size,int dimension){
	if(dimension==1){
		for(int i=0;i<size;i++){
			printf("%2d  ",*(arr+i));
		}
	}else if(dimension==2){
		for(int i=0;i<size;i++){
			for(int j=0;j<size;j++){
				printf("%2d  ",*(arr+i*size+j));
			}
			printf("\n");
		}
	}
}

int main() {
	scanf("%d%d%d%d", &n,&m,&c1,&c2);
	for(int i=0;i<n;i++){
		scanf("%d",&team[i]);
	}
	for(int i=0;i<m;i++){
		int t1,t2,len;
		scanf("%d%d%d",&t1,&t2,&len);
		g[t1][t2]=g[t2][t1]=len;
	}
	
	dijkstra(c1);
	
	//output(dist,n,1);
	dfs(c2,0);
	printf("%d %d",path,maxHand);
	return 0;
}

