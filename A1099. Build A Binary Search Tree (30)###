/*
https://www.patest.cn/contests/pat-a-practise/1099

类型：二叉搜索树，层序遍历。

难度：3（这类题在PAT里挺多的，做法有类似之处，所以本身并不算难）

注意事项：
1. 注意结构体的构造函数的一种写法：node(int left_,int right_):left(left_),right(right_){}
*/
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;

#define P 0

const int MAXN=110;

int n;
struct node{
	int data;
	int left,right;
	node(){}
	node(int left_,int right_):left(left_),right(right_){}
}tree[MAXN];

int dataArr[MAXN];

int dataPtr=0;
void inorder(int index){
#if P
	printf("\n***\nindex=%d,left=%d,right=%d\n***\n",index,tree[index].left,tree[index].right);
#endif
	if(index<n&&index>-1){
		inorder(tree[index].left);
		tree[index].data=dataArr[dataPtr++];
		inorder(tree[index].right);
	}
}

bool blank=false;
void levelorder(){
	queue<int> q;
	q.push(0);
	while(!q.empty()){
		int now=q.front();
		q.pop();
		if(blank)printf(" ");else blank=true;
		printf("%d",tree[now].data);
		if(tree[now].left!=-1)q.push(tree[now].left);
		if(tree[now].right!=-1)q.push(tree[now].right);
	}
}

int main() {
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		int l,r;
		scanf("%d%d",&l,&r);
		tree[i] = node(l, r);
	}
	for(int i=0;i<n;i++){
		scanf("%d",&dataArr[i]);
	}
	sort(dataArr, dataArr + n);
	inorder(0);
	levelorder();
	return 0;
}
