/*
https://www.patest.cn/contests/pat-a-practise/1037

类型：贪心。

难度：1（难度在于，需要能证明使用贪心算法必定能取得最大值的正确性。）
（注意到只有正数与正数相乘，以及负数与负数相乘才能取得正值，其他情况为0或为负都不需要考虑，因为加到结果里会让结果变小。所以可划分为正数和负数两个集合分别考虑。）
*/
#include<cstdio>
#include<algorithm>
#include<iostream>
using namespace std;

const int maxn=100010;
const int INF=1000000000;

int nc,np;
int c[maxn],p[maxn];

int main(){
	scanf("%d",&nc);
	for(int i=0;i<nc;i++){
		scanf("%d",&c[i]);
	}
	scanf("%d",&np);
	for(int i=0;i<np;i++){
		scanf("%d",&p[i]);
	}
	sort(c,c+nc);
	sort(p,p+np);
	
	int ans=0;
	int cl=0,cr=nc-1;
	int pl=0,pr=np-1;
	while(cl<=cr&&pl<=pr){
		int leftPrice=c[cl]*p[pl];
		int rightPrice=c[cr]*p[pr];
		if(leftPrice>0||rightPrice>0){//只要有其中一个大于0，则选择更大的那个。否则两个都小于0，都不选。
			if(leftPrice>=rightPrice){
				ans+=leftPrice;
				cl++;
				pl++;
			}else{
				ans+=rightPrice;
				cr--;
				pr--;
			}
		}else{
			//leftPrice不为正的情况：券为正，商品为负；券为负，商品为正。调整leftPrice，期望它为正。
			//rightPrice不为正的情况：券为负，商品为正；券为正，商品为负。
			//由上面两行的分析可知，都为负就不再会出现为正的情况，此时应该不买任何产品。
			break;
		}
	}
	printf("%d",ans);
	return 0;
}
