/*
https://www.patest.cn/contests/pat-a-practise/1093

类型：字符串子串（不连续子串；统计某个单词在字符串中出现的次数）。

难度：2

注意事项：
1. 可以了解一些模运算的知识（摘自百度百科）：
取模运算（“Modulo Operation”）和取余运算（“Complementation ”）两个概念有重叠的部分但又不完全一致。主要的区别在于对负整数进行除法运算时操作不同。

对于整型数a，b来说，取模运算或者求余运算的方法都是：
1.求整数商：c=a/b;
2.计算模或者余数：r=a-c*b.
求模运算和求余运算在第一步不同: 取余运算在取c的值时，向0方向舍入(fix()函数)；而取模运算在计算c的值时，向负无穷方向舍入(floor()函数)。
例如：计算-7 Mod 4
那么：a = -7；b = 4；
第一步：求整数商c，如进行求模运算c = -2（向负无穷方向舍入），求余c = -1（向0方向舍入）；
第二步：计算模和余数的公式相同，但因c的值不同，求模时r = 1，求余时r = -3。
归纳：当a和b符号一致时，求模运算和求余运算所得的c的值一致，因此结果一致。
当符号不一致时，结果不一样。求模运算结果的符号和b一致，求余运算结果的符号和a一致。
另外各个环境下%运算符的含义不同，比如c/c++，java 为取余，而python则为取模。

取模运算基本性质：
1. 若p|(a-b)，则a≡b (% p)。例如 11 ≡ 4 (% 7)， 18 ≡ 4(% 7)
2. (a % p)=(b % p)意味a≡b (% p)
3. 对称性：a≡b (% p)等价于b≡a (% p)
4. 传递性：若a≡b (% p)且b≡c (% p) ，则a≡c (% p)

取模运算运算规则：
模运算与基本四则运算有些相似，但是除法例外。其规则如下：
1. (a + b) % p = (a % p + b % p) % p
2. (a - b) % p = (a % p - b % p) % p
3. (a * b) % p = (a % p * b % p) % p
4. a ^ b % p = ((a % p)^b) % p
*/

/*
思路：
用x来记录p的数量。
每次遇到a时，a和之前的p都可以配对，ap的数量可增加p个，用y来记录ap的数量。
t和之前的pa都可以配对，所以每遇到t，pat都可以增加pa个，用z记录pat的数量。

因为遇到a时，之前p的数量和之前a的关系并不影响当前p数量和a的关系，此时配对的pa时新的pa（所以pa增加x个），由此可以保证算法的正确性。pat的求法同理。
*/
#include<cstdio>
#include<cstring> 
#include<algorithm>
#include<vector> 
using namespace std;

#define A 0
#if A
#endif

const int MAXN=100010;
const int INF=1<<31-1;//int的最大值为2^31-1。

const int upperLimit=1000000007;
char str[MAXN];
int main(){
	scanf("%s",str);
	int len=strlen(str);
	long long x=0,y=0,z=0;
	for(int i=0;i<len;i++){
		if(str[i]=='P'){
			x+=1;
		}else if(str[i]=='A'){
			y+=x;//
		}else{//说了只有PAT三个字符。
			z+=y;
			z%=upperLimit;//上面的x和y应该可以对upperLimit取模，因为y(i)=y(i-1)+x(i),z(i)=z(i-1)+y(i)=z(i-1)+y(i-1)+x(i);由模运算得加法(a + b) % p = (a % p + b % p) % p，有z(i)%m=(z(i-1)+y(i))%m=(z(i-1)%m+y(i)%m)%m，即计算这一步的z时，所用的y可以是取过模的，x同理。
		}
	}
	printf("%lld",z);
	return 0;
}
